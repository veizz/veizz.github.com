import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as e,b as a}from"./app-DoMxC1ve.js";const l={},i=a(`<h2 id="引-原理简介" tabindex="-1"><a class="header-anchor" href="#引-原理简介"><span>引. 原理简介</span></a></h2><blockquote><p>原理内容引自：<a href="http://www.guokr.com/post/114121/" target="_blank" rel="noopener noreferrer">http://www.guokr.com/post/114121/</a></p></blockquote><p>HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL协议不仅仅是一套加密传输的协议，更是一件经过艺术家精心设计的艺术品，TLS/SSL中使用了非对称加密，对称加密以及HASH算法。握手过程的简单描述如下：</p><ol><li><p><strong>浏览器将自己支持的一套加密规则发送给网站。</strong></p></li><li><p><strong>网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。</strong> 证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。</p></li><li><p><strong>获得网站证书之后</strong>浏览器要做以下工作：<br> a. 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。<br> b. 如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。<br> c. 使用约定好的HASH计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站。</p></li><li><p><strong>网站接收浏览器发来的数据之后</strong>要做以下的操作：<br> a. 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。<br> b. 使用密码加密一段握手消息，发送给浏览器。</p></li><li><p><strong>浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密</strong>。</p></li></ol><p>这里浏览器与网站互相发送加密的握手消息并验证，目的是为了<strong>保证双方都获得了一致的密码</strong>，并且可以正常的加密解密数据，为后续真正数据的传输做一次测试。另外，HTTPS一般使用的加密与HASH算法如下：</p><ul><li>非对称加密算法：RSA，DSA/DSS</li><li>对称加密算法：AES，RC4，3DES</li><li>HASH算法：MD5，SHA1，SHA256</li></ul><p><strong>其中非对称加密算法用于在握手过程中加密生成的密码，对称加密算法用于对真正传输的数据进行加密，而HASH算法用于验证数据的完整性</strong>。由于浏览器生成的密码是整个数据加密的关键，因此在传输的时候使用了非对称加密算法对其加密。非对称加密算法会生成公钥和私钥，公钥只能用于加密数据，因此可以随意传输，而网站的私钥用于对数据进行解密，所以网站都会非常小心的保管自己的私钥，防止泄漏。<br> TLS握手过程中如果有任何错误，都会使加密连接断开，从而阻止了隐私信息的传输。正是由于HTTPS非常的安全，攻击者无法从中找到下手的地方，于是更多的是采用了假证书的手法来欺骗客户端，从而获取明文的信息，但是这些手段都可以被识别出来，我将在后续的文章进行讲述。</p><h2 id="一-为什么要使用https" tabindex="-1"><a class="header-anchor" href="#一-为什么要使用https"><span>一. 为什么要使用https</span></a></h2><h3 id="_1-安全考虑" tabindex="-1"><a class="header-anchor" href="#_1-安全考虑"><span>1）安全考虑</span></a></h3><p>http是明文的传输，而https是安全的传输。具体怎么做到的安全，上面原理部分已经有过说明。最常用到一个场景是登录及注册。因为登录是需要用户名密码的，这些数据是关乎用户隐私的敏感数据,明文传输很不安全。（<em>特别是在公共场所的wifi，还有人说骑着一个自行车带一个不设密码的wifi在在大街上走一圈能获得很多的用户名密码</em>）为了防止这些信息的明文传输，我们一般通过使用Https的方式来做。</p><h3 id="_2-防止被网络运营商篡改网页内容-防止被挂马" tabindex="-1"><a class="header-anchor" href="#_2-防止被网络运营商篡改网页内容-防止被挂马"><span>2）防止被网络运营商篡改网页内容，防止被挂马</span></a></h3><p>还有一些情况，比如说联通，会给网页里面添加一些东西，比如说广告。这些东西通常会影响到用户的使用正常服务的体验。为了防止这种事情发生，也应该使用https。 <img src="http://ww4.sinaimg.cn/mw1024/6cd82737jw1exwsaps60fj20sg0j5jze.jpg" style="width:50%;margin-left:25%;"></p><h2 id="二-关于证书的申请" tabindex="-1"><a class="header-anchor" href="#二-关于证书的申请"><span>二. 关于证书的申请</span></a></h2><ul><li>baidu: Symantec</li><li>taobao: globalsign</li><li>zhihu.com: geotrust</li><li>免费: startssl</li></ul><h3 id="几种证书的类型-关键名词" tabindex="-1"><a class="header-anchor" href="#几种证书的类型-关键名词"><span>几种证书的类型，关键名词：</span></a></h3><ul><li>EV: extended validation, 通常是在地址栏同时显示公司名称。比较权威的认证（很贵）</li><li>OV: organization validated, 证书包含对应组织信息</li><li>wildcard: 通配符，例如*.example.com， 同时支持example.com下所有子域名。（注意，a.b.example.com，有的不支持。）</li><li>DV: 最简单的域名认证。 domain validation.</li></ul><p>startssl可以申请免费的证书，每个证书支持最多5个域名。</p><h2 id="三-nginx配置" tabindex="-1"><a class="header-anchor" href="#三-nginx配置"><span>三. nginx配置</span></a></h2><div class="language-lang=nginx line-numbers-mode" data-highlighter="shiki" data-ext="lang=nginx" data-title="lang=nginx" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    # 默认端口</span></span>
<span class="line"><span>    listen 443;</span></span>
<span class="line"><span>    server_name  www.example.com;</span></span>
<span class="line"><span>    access_log  /export/log/nginx/www.example.com/access.log combined;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 开启ssl</span></span>
<span class="line"><span>    ssl on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 证书路径， 从ca机构申请的证书。</span></span>
<span class="line"><span>    ssl_certificate /export/ssl/www.example.com/www.crt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 私钥路径， 从ca机构申请证书时的key</span></span>
<span class="line"><span>    ssl_certificate_key /export/ssl/www.example.com/www.key.unsecure;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # edh加密算法的参数。 需要openssl的背景知识，参考 ：http://www.chinaunix.net/old_jh/13/478901.html</span></span>
<span class="line"><span>    # 关于forward secrecy， 参考这里：http://ju.outofmemory.cn/entry/188804</span></span>
<span class="line"><span>    ssl_dhparam  /export/ssl/www.example.com/dhparam.pem;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 客户端重用会话参数的缓存时间</span></span>
<span class="line"><span>    ssl_session_timeout 5m;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 开启指定的加密协议。 tls1.1和tls的1.2版本需要openssl1.0.1及其以上版本。</span></span>
<span class="line"><span>    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2 ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 支持的加密算法， openssl对应的格式。</span></span>
<span class="line"><span>    ssl_ciphers  &quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !MEDIUM&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 当使用SSLv3, 和TLS协议的时候，更倾向于使用服务端支持的算法</span></span>
<span class="line"><span>    ssl_prefer_server_ciphers on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 设置存储会话参数的缓存的大小和类型。</span></span>
<span class="line"><span>    ssl_session_cache shared:SSL:10m;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 添加头信息，启用HSTS。如果全站使用https的话，建议打开。</span></span>
<span class="line"><span>    # 参考 这里：http://www.2cto.com/Article/201307/230740.html  ， https://imququ.com/post/web-security-and-response-header.html</span></span>
<span class="line"><span>    add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 不允许使用在iframe中。</span></span>
<span class="line"><span>    add_header X-Frame-Options DENY;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 根据content-type的值来渲染页面内容。</span></span>
<span class="line"><span>    add_header X-Content-Type-Options nosniff;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    #ssl_session_tickets off;</span></span>
<span class="line"><span>    #ssl_stapling on;</span></span>
<span class="line"><span>    #ssl_stapling_verify on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-带来的影响" tabindex="-1"><a class="header-anchor" href="#四-带来的影响"><span>四. 带来的影响</span></a></h2><ul><li>用户访问时速度会比普通的http慢100ms左右</li><li>测试抓包的时候，比如说使用burpsuite, 要给手机安装证书才能使用，否则无法抓取https包。</li></ul><h2 id="五-注意" tabindex="-1"><a class="header-anchor" href="#五-注意"><span>五. 注意</span></a></h2><ol start="0"><li><p>做出的https配置是否安全可靠，兼容性好，使用第三方检测工具</p><ul><li>评级工具：<a href="https://www.ssllabs.com" target="_blank" rel="noopener noreferrer">ssllabs</a></li></ul></li><li><p>配置冲突，所有的server都要配置同样的ssl配置。 ssl的相关配置是写在server的大括号中的，但是当前大括号内的配置有可能会被其它大括号内的配置所覆盖。</p></li></ol><blockquote><p>（我猜是因为，早期的ssl配置不支持一个主机配置多个ssl的服务域名，后来就留下了一些bug）</p></blockquote><ol start="2"><li><p>nginx -V 查看当前nginx版本，和支持的东西，查看使用的openssl版本号</p></li><li><p>私钥的使用，需要密码，解决办法是: 主要是因为生成证书的时候设置了密码，以防止别人拿到key文件直接使用。这么做了之后，给key文件添加密码的意义就没有了。在一些特别注意安全的地方，一定不要这么做。这么生成了明文的私钥之后，一定要好好保管。 nginx reload的时候需要输入key的密码，解决办法如下： <a href="https://segmentfault.com/q/1010000000119345" target="_blank" rel="noopener noreferrer">https://segmentfault.com/q/1010000000119345</a></p></li></ol><div class="language-lang=shell line-numbers-mode" data-highlighter="shiki" data-ext="lang=shell" data-title="lang=shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>openssl rsa -in server.key -out server.key.unsecure</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>sni（<code>server name indication</code>）支持： 就是一个ip上面通过不同的servername 去host多个域名的服务，当前版本的nginx一般都支持。但是有一些浏览器不支持。</li></ol><blockquote><p>（因为http1.0的协议在发送get请求的时候，只传了ip到服务端，header中没有host。导致服务端无法区分访问的是哪个域名，当前主流版本的http协议是1.1）</p></blockquote><ol start="5"><li>是否允许页面被使用在iframe中？</li></ol><div class="language-lang=shell line-numbers-mode" data-highlighter="shiki" data-ext="lang=shell" data-title="lang=shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>    add_header X-Frame-Options SAMEORIGIN;     # 同源的才可以</span></span>
<span class="line"><span>    #add_header X-Frame-Options DENY;               # 不允许使用在iframe中</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><p>在https的页面中，不允许直接访问http的资源。如script的src为http的，会被浏览器block掉。 例： <code>Mixed Content: The page at &#39;https://www.example.com/&#39; was loaded over HTTPS, but requested an insecure script &#39;http://www.example.com/script/path&#39;. This request has been blocked; the content must be served over HTTPS.</code></p></li><li><p>证书链不完整的问题 有时候在申请证书的时候会遇到只有单个证书，没有上级机构证书的情况。这时需要到申请证书的地方找到上线证书（包含完整证书链）。否则的话，在一些设备上会出现因为证书链不完整引起的无法创建连接的错误。</p></li></ol><h2 id="六-参考文档" tabindex="-1"><a class="header-anchor" href="#六-参考文档"><span>六. 参考文档：</span></a></h2><p>nginx官方文档： <a href="http://nginx.org/en/docs/http/configuring_https_servers.html" target="_blank" rel="noopener noreferrer">http://nginx.org/en/docs/http/configuring_https_servers.html</a><br> ssl相关配置参数文档： <a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html" target="_blank" rel="noopener noreferrer">http://nginx.org/en/docs/http/ngx_http_ssl_module.html</a><br> 网友配置： <a href="https://doc.ssl.do/page/install-nginx/" target="_blank" rel="noopener noreferrer">https://doc.ssl.do/page/install-nginx/</a></p>`,33),p=[i];function t(r,c){return e(),n("div",null,p)}const h=s(l,[["render",t],["__file","2016-03-10-https_config_notes.html.vue"]]),m=JSON.parse('{"path":"/posts/2016-03-10-https_config_notes.html","title":"https配置手记","lang":"zh-CN","frontmatter":{"v_pageid":"830bef08ac03463a870b5114843f32aa","author":"veizz","title":"https配置手记","date":"2016-03-10T21:44:45.000Z","categories":"server","head":"之前给公司的线上服务添加了https的支持，留下一些记录，包含https创建连接过程、在nginx上配置https支持、及证书申请相关介绍"},"headers":[{"level":2,"title":"引. 原理简介","slug":"引-原理简介","link":"#引-原理简介","children":[]},{"level":2,"title":"一. 为什么要使用https","slug":"一-为什么要使用https","link":"#一-为什么要使用https","children":[{"level":3,"title":"1）安全考虑","slug":"_1-安全考虑","link":"#_1-安全考虑","children":[]},{"level":3,"title":"2）防止被网络运营商篡改网页内容，防止被挂马","slug":"_2-防止被网络运营商篡改网页内容-防止被挂马","link":"#_2-防止被网络运营商篡改网页内容-防止被挂马","children":[]}]},{"level":2,"title":"二. 关于证书的申请","slug":"二-关于证书的申请","link":"#二-关于证书的申请","children":[{"level":3,"title":"几种证书的类型，关键名词：","slug":"几种证书的类型-关键名词","link":"#几种证书的类型-关键名词","children":[]}]},{"level":2,"title":"三. nginx配置","slug":"三-nginx配置","link":"#三-nginx配置","children":[]},{"level":2,"title":"四. 带来的影响","slug":"四-带来的影响","link":"#四-带来的影响","children":[]},{"level":2,"title":"五. 注意","slug":"五-注意","link":"#五-注意","children":[]},{"level":2,"title":"六. 参考文档：","slug":"六-参考文档","link":"#六-参考文档","children":[]}],"git":{"createdTime":1457629430000,"updatedTime":1721272368000,"contributors":[{"name":"veizz","email":"veizzsmile@gmail.com","commits":4}]},"readingTime":{"minutes":8.14,"words":2443},"filePathRelative":"posts/2016-03-10-https_config_notes.md","localizedDate":"2016年3月10日","excerpt":"<h2>引. 原理简介</h2>\\n<blockquote>\\n<p>原理内容引自：<a href=\\"http://www.guokr.com/post/114121/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://www.guokr.com/post/114121/</a></p>\\n</blockquote>\\n<p>HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL协议不仅仅是一套加密传输的协议，更是一件经过艺术家精心设计的艺术品，TLS/SSL中使用了非对称加密，对称加密以及HASH算法。握手过程的简单描述如下：</p>"}');export{h as comp,m as data};
